//@ts-check

/**
 * Classe parent das subclasses de alerta.  
 */
class Alert {

    /** @property {any[]} expiringItems Elementos prestes a vencer*/
    expiringItems = []

    /**
     * @property {string} subject Assunto da mensagem (e-mail)     
     */
    subject;

    /** @property {number[]} prazos Prazos para a criaÃ§Ã£o e envio de alertas */
    prazos;

    /** @property {string} dbQuery Query SELECT passada para o banco de dados*/
    dbQuery;

    /** @property {any[]} mailFields Campos correspondentes no DB que devem aparecer na tabela que consta na mensagem*/
    mailFields = []

    /** @property {string} messageIntro Texto de introduÃ§Ã£o da mensagem*/
    messageIntro;

    /** @property {string[]} mailHeaders CabeÃ§alho da tabela contida na mensagem*/
    mailHeaders;

    /** @property {string} messageTip OrientaÃ§Ã£o para como resolver o alerta*/
    messageTip;

    /** @property {string} tipPath OrientaÃ§Ã£o para onde no sistema achar a resoluÃ§Ã£o do alerta*/
    tipPath;

    /** @property {*} recipients OrientaÃ§Ã£o para onde no sistema achar a resoluÃ§Ã£o do alerta*/
    recipients;

    /**Filtra os itens (ex: apÃ³lice, procuraÃ§Ã£o, etc) que estÃ£o a vencer por empresa, para concentrar todos de uma determinada empresa em um sÃ³ e-mail.
    * @param {Number} codigo_empresa CÃ³digo da empresa/delegatÃ¡rio no banco de dados Posgresql
    * @returns Retorna uma array objetos, por ex: apÃ³lices de seguros ou procuraÃ§Ãµes a vencer agrupadas por empresa
    */
    getEmpresaExpiringItems(codigo_empresa, expiringItems) {
        const expiringEmpresaItems = expiringItems
            .filter(a => a.codigo_empresa === codigo_empresa)
            .map((/** @type {{ any }} */ item) => {
                const obj = {}
                this.mailFields.forEach(f => Object.assign(obj, { [f]: item[f] }))
                return obj
            })

        return expiringEmpresaItems
    }

    /**
     * Cria a mensagem que serÃ¡ enviada por e-mail. A mensagem Ã© dividida em intro, details, tip e tipPath.
     * intro contÃ©m o inÃ­cio da mensagem, com o conteÃºdo do que se trata; * details sÃ£o os detalhes que vÃªm dos objetos gerados em getEmpresaExpiredItems;
     * tip Ã© a orientaÃ§Ã£o para como resolver o alerta; * tipPath Ã© o caminho que deve ser percorrido no sistema para resolver o alerta.
     * @param {array} expiringEmpresaItems - array de objetos com as props (ex: { numero, vencimento, etc }), gerados no getEmpresaExpiringItems
     * @returns {object} objeto com a mensagem dividida em partes (intro, details, tip e tipPath) para a formataÃ§Ã£o e envio do e-mail.
     */
    createMessage(expiringEmpresaItems) {
        //console.log("ðŸš€ ~ file: SeguroAlert.js ~ line 30 ~ SeguroAlert ~ createMessage ~ apolices", apolices)

        if (expiringEmpresaItems.length > 0) {

            const message = {
                intro: this.messageIntro,
                tableHeaders: this.mailHeaders,
                tableData: expiringEmpresaItems,
                tip: this.messageTip,
                tipPath: this.tipPath
            }
            return message
        }
    }
}

module.exports = Alert
